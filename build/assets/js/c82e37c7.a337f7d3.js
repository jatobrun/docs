"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[187],{3905:function(e,a,n){n.d(a,{Zo:function(){return p},kt:function(){return u}});var t=n(7294);function o(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function l(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function r(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?l(Object(n),!0).forEach((function(a){o(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,t,o=function(e,a){if(null==e)return{};var n,t,o={},l=Object.keys(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||(o[n]=e[n]);return o}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=t.createContext({}),d=function(e){var a=t.useContext(i),n=a;return e&&(n="function"==typeof e?e(a):r(r({},a),e)),n},p=function(e){var a=d(e.components);return t.createElement(i.Provider,{value:a},e.children)},c={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},m=t.forwardRef((function(e,a){var n=e.components,o=e.mdxType,l=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=d(n),u=o,k=m["".concat(i,".").concat(u)]||m[u]||c[u]||l;return n?t.createElement(k,r(r({ref:a},p),{},{components:n})):t.createElement(k,r({ref:a},p))}));function u(e,a){var n=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var l=n.length,r=new Array(l);r[0]=m;var s={};for(var i in a)hasOwnProperty.call(a,i)&&(s[i]=a[i]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var d=2;d<l;d++)r[d]=n[d];return t.createElement.apply(null,r)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7830:function(e,a,n){n.r(a),n.d(a,{frontMatter:function(){return s},contentTitle:function(){return i},metadata:function(){return d},toc:function(){return p},default:function(){return m}});var t=n(7462),o=n(3366),l=(n(7294),n(3905)),r=["components"],s={sidebar_position:4},i="JS",d={unversionedId:"lenguajes/js",id:"lenguajes/js",title:"JS",description:"Style Guide",source:"@site/docs/lenguajes/js.md",sourceDirName:"lenguajes",slug:"/lenguajes/js",permalink:"/docs/lenguajes/js",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/lenguajes/js.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Go!",permalink:"/docs/lenguajes/go"},next:{title:"Cloud Digital Leader!",permalink:"/docs/gcp/cloud-digital-leader"}},p=[{value:"Style Guide",id:"style-guide",children:[],level:2},{value:"Developer Tools",id:"developer-tools",children:[{value:"Sandbox",id:"sandbox",children:[],level:3}],level:2},{value:"Tipos de datos",id:"tipos-de-datos",children:[{value:"Numbers",id:"numbers",children:[{value:"Operaciones Aritmentica",id:"operaciones-aritmentica",children:[],level:4},{value:"Operaciones Logicas",id:"operaciones-logicas",children:[],level:4}],level:3},{value:"Strings",id:"strings",children:[{value:"Concatenacion",id:"concatenacion",children:[],level:4},{value:"Indexing",id:"indexing",children:[],level:4},{value:"Escaping Characters",id:"escaping-characters",children:[],level:4},{value:"Comparaciones",id:"comparaciones",children:[],level:4}],level:3},{value:"Boleanos",id:"boleanos",children:[],level:3},{value:"Null, Undefined y NaN",id:"null-undefined-y-nan",children:[],level:3}],level:2},{value:"Type conversion",id:"type-conversion",children:[],level:2},{value:"implicit type coercion",id:"implicit-type-coercion",children:[],level:2},{value:"Semicolons",id:"semicolons",children:[],level:2},{value:"Variables",id:"variables",children:[{value:"Naming Conventions",id:"naming-conventions",children:[],level:3}],level:2},{value:"Comentarios",id:"comentarios",children:[],level:2},{value:"Condiciones",id:"condiciones",children:[{value:"If...Else",id:"ifelse",children:[],level:3},{value:"ElseIf",id:"elseif",children:[],level:3},{value:"Operadores Logicos",id:"operadores-logicos",children:[{value:"Tablas de verdad",id:"tablas-de-verdad",children:[],level:4}],level:3},{value:"Truthy and Falsy",id:"truthy-and-falsy",children:[],level:3},{value:"Operador Ternario",id:"operador-ternario",children:[],level:3},{value:"Switch",id:"switch",children:[],level:3}],level:2},{value:"Bucles",id:"bucles",children:[{value:"Bucle While",id:"bucle-while",children:[],level:3},{value:"Bucle For",id:"bucle-for",children:[],level:3},{value:"Bucles anidados",id:"bucles-anidados",children:[],level:3},{value:"Incrementos y Decrementos",id:"incrementos-y-decrementos",children:[],level:3}],level:2},{value:"Scopes",id:"scopes",children:[{value:"Declaracion de variables",id:"declaracion-de-variables",children:[],level:3}],level:2},{value:"Funciones",id:"funciones",children:[{value:"Parametros vs Argumentos",id:"parametros-vs-argumentos",children:[],level:3},{value:"Return",id:"return",children:[],level:3},{value:"Shadowing",id:"shadowing",children:[],level:3},{value:"Hoisting",id:"hoisting",children:[],level:3},{value:"Function expression",id:"function-expression",children:[{value:"Callbacks",id:"callbacks",children:[],level:4}],level:3}],level:2},{value:"Arrays",id:"arrays",children:[{value:"Indexing",id:"indexing-1",children:[],level:3},{value:"Propiedades",id:"propiedades",children:[],level:3},{value:"Metodos",id:"metodos",children:[],level:3},{value:"Bucles",id:"bucles-1",children:[{value:"Foreach",id:"foreach",children:[],level:4},{value:"Map",id:"map",children:[],level:4}],level:3},{value:"Arrays in Arrays",id:"arrays-in-arrays",children:[],level:3}],level:2},{value:"Objetos",id:"objetos",children:[{value:"Naming conventions",id:"naming-conventions-1",children:[],level:3}],level:2},{value:"ES6",id:"es6",children:[{value:"Template literal",id:"template-literal",children:[],level:3},{value:"Destructing",id:"destructing",children:[],level:3},{value:"Object Literal Shorthand",id:"object-literal-shorthand",children:[],level:3},{value:"Iteration",id:"iteration",children:[],level:3},{value:"Spread Operator",id:"spread-operator",children:[],level:3},{value:"Rest Parameter",id:"rest-parameter",children:[],level:3},{value:"Arrow functions",id:"arrow-functions",children:[{value:"Concise and block body syntax",id:"concise-and-block-body-syntax",children:[],level:4}],level:3},{value:"Default function parameters",id:"default-function-parameters",children:[{value:"Destructuring",id:"destructuring",children:[],level:4}],level:3},{value:"Classes",id:"classes",children:[{value:"Static methods",id:"static-methods",children:[],level:4},{value:"Beneficios de las clases",id:"beneficios-de-las-clases",children:[],level:4},{value:"Cosas a tener en cuenta con las clases",id:"cosas-a-tener-en-cuenta-con-las-clases",children:[],level:4}],level:3},{value:"Symbols",id:"symbols",children:[],level:3},{value:"Iterable and Iteration",id:"iterable-and-iteration",children:[],level:3},{value:"Sets",id:"sets",children:[],level:3},{value:"Weak set",id:"weak-set",children:[{value:"Garbage collector",id:"garbage-collector",children:[],level:4}],level:3},{value:"Maps",id:"maps",children:[],level:3},{value:"Weak Maps",id:"weak-maps",children:[],level:3},{value:"Promesas",id:"promesas",children:[],level:3},{value:"Proxies",id:"proxies",children:[],level:3},{value:"Generators",id:"generators",children:[],level:3},{value:"Pollyfills",id:"pollyfills",children:[{value:"Compilers",id:"compilers",children:[],level:4},{value:"Transpilers",id:"transpilers",children:[],level:4}],level:3}],level:2}],c={toc:p};function m(e){var a=e.components,s=(0,o.Z)(e,r);return(0,l.kt)("wrapper",(0,t.Z)({},c,s,{components:a,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"js"},"JS"),(0,l.kt)("h2",{id:"style-guide"},"Style Guide"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"http://udacity.github.io/frontend-nanodegree-styleguide/javascript.html"},"Udacity")),(0,l.kt)("h2",{id:"developer-tools"},"Developer Tools"),(0,l.kt)("p",null,"Todos los navegadores tienen un ",(0,l.kt)("inlineCode",{parentName:"p"},"engine")," el cual es capaz de entender ",(0,l.kt)("inlineCode",{parentName:"p"},"js code")," y ejecutar\nlas acciones que se declaran."),(0,l.kt)("p",null,"Podemos usar las developer tools para correr codigo de ",(0,l.kt)("inlineCode",{parentName:"p"},"JS")," en el navegador\nPara esto si usamos ",(0,l.kt)("inlineCode",{parentName:"p"},"chrome")," utilizamos ",(0,l.kt)("inlineCode",{parentName:"p"},"Command + Option + J")," para abrir una consola"),(0,l.kt)("h3",{id:"sandbox"},"Sandbox"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"sandbox")," es un lugar donde podemos testear codigo, realizar debugs de codigo sin tener que\npreocuparnos por las consecuencias de nuestro codigo en la maquina. "),(0,l.kt)("h2",{id:"tipos-de-datos"},"Tipos de datos"),(0,l.kt)("p",null,"Los tipos de datos son los ",(0,l.kt)("inlineCode",{parentName:"p"},"building block")," en cualquier lenguaje de programacion"),(0,l.kt)("h3",{id:"numbers"},"Numbers"),(0,l.kt)("p",null,"Incluye cualquier numero ",(0,l.kt)("inlineCode",{parentName:"p"},"positivo")," o ",(0,l.kt)("inlineCode",{parentName:"p"},"negativo")," asi como ",(0,l.kt)("inlineCode",{parentName:"p"},"decimales"),"."),(0,l.kt)("p",null,"Para definir un numero en js "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"3\n")),(0,l.kt)("h4",{id:"operaciones-aritmentica"},"Operaciones Aritmentica"),(0,l.kt)("p",null,"En ",(0,l.kt)("inlineCode",{parentName:"p"},"js")," tenemos todas las operaciones aritmetica basicas como por ejemplo:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Suma (+)"),(0,l.kt)("li",{parentName:"ul"},"Resta (-)"),(0,l.kt)("li",{parentName:"ul"},"Multiplicacion (*) "),(0,l.kt)("li",{parentName:"ul"},"Division (/)"),(0,l.kt)("li",{parentName:"ul"},"Residuo (%)")),(0,l.kt)("h4",{id:"operaciones-logicas"},"Operaciones Logicas"),(0,l.kt)("p",null,"En ",(0,l.kt)("inlineCode",{parentName:"p"},"js")," tambien podemos obtener comparaciones logicas como por ejemplo:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"menor a (<)"),(0,l.kt)("li",{parentName:"ul"},"mayor a (>)"),(0,l.kt)("li",{parentName:"ul"},"menor o igual a (<=)"),(0,l.kt)("li",{parentName:"ul"},"mayor o igual a (>=)"),(0,l.kt)("li",{parentName:"ul"},"igual a (==)"),(0,l.kt)("li",{parentName:"ul"},"diferente a (!=)")),(0,l.kt)("h3",{id:"strings"},"Strings"),(0,l.kt)("p",null,"Los ",(0,l.kt)("inlineCode",{parentName:"p"},"strings")," son cadenas de caracteres las cuales encerramos con comilla simple ",(0,l.kt)("inlineCode",{parentName:"p"},"'")," o\ncomilla doble ",(0,l.kt)("inlineCode",{parentName:"p"},'"'),". Ambos son validos para saber cual usar puedes utilizar como referencia\nel style guide de udacity en la ",(0,l.kt)("a",{parentName:"p",href:"#style-guide"},"seccion"),"."),(0,l.kt)("p",null,"Los ",(0,l.kt)("inlineCode",{parentName:"p"},"strings")," tambien pueden ser de un solo caracter como por ejemplo ",(0,l.kt)("inlineCode",{parentName:"p"},'"h"')," o incluso numeros\n",(0,l.kt)("inlineCode",{parentName:"p"},'"123"')),(0,l.kt)("h4",{id:"concatenacion"},"Concatenacion"),(0,l.kt)("p",null,"Podemos concatener ",(0,l.kt)("inlineCode",{parentName:"p"},"strings")," es decir juntarlos en un solo ",(0,l.kt)("inlineCode",{parentName:"p"},"string final"),". Lo hacemos de la siguiente\nmanera:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'"Hello," + " New York City"\n')),(0,l.kt)("p",null,"Algunos ejemplos de esto "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'"hello" + "world"'),(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"Retorna:"),' "helloworld"'))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'"Hello + 5*10"'),(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"Retorna:"),' "Hello + 5*10"'))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'"Hello" + 5*10'),(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"Retorna:"),' "Hello50"')))),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"El ultimo caso descubrimos un comportamiento peculiar de js el cual se lo conoce como\n",(0,l.kt)("inlineCode",{parentName:"p"},"implicit type coercion"),", para revisar mas acerca del tema revisa la ",(0,l.kt)("a",{parentName:"p",href:"#implicit-type-coercion"},"seccion")))),(0,l.kt)("h4",{id:"indexing"},"Indexing"),(0,l.kt)("p",null,"Los ",(0,l.kt)("inlineCode",{parentName:"p"},"string")," tienen algo llamado ",(0,l.kt)("inlineCode",{parentName:"p"},"index")," lo cual es la posicion que tiene cada uno de los caracteres\nque conforman el ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),". Por ejemplo "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'"James"[0];\n')),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"Returns:"),' "J"')),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"indexing",src:n(3781).Z})),(0,l.kt)("h4",{id:"escaping-characters"},"Escaping Characters"),(0,l.kt)("p",null,"Los ",(0,l.kt)("inlineCode",{parentName:"p"},"escaping characters")," le dicen a ",(0,l.kt)("inlineCode",{parentName:"p"},"js")," que ignore el significado del caracter y use\nsu valor de forma literal. Por ejemplo la comilla doble ",(0,l.kt)("inlineCode",{parentName:"p"},'"'),", js la usa para determinar\nel inicio o final de un string al usar ",(0,l.kt)("inlineCode",{parentName:"p"},'\\"')," le decimos al interpreter que tome el valor literal\nque es la comilla doble."),(0,l.kt)("p",null,"Los caracteres especiales que queremos skippear son:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"\\\\")," con esto tenemos un ",(0,l.kt)("inlineCode",{parentName:"li"},"\\")," dentro del string"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'\\"')," obtenemos una comilla doble en el string "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"\\'")," obtenemos una comilla simple en el string "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"\\n")," salto de linea "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"\\t")," agregar un tab ")),(0,l.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},(0,l.kt)("inlineCode",{parentName:"p"},"\\\\")," los usamos en los ",(0,l.kt)("strong",{parentName:"p"},"Paths")))),(0,l.kt)("h4",{id:"comparaciones"},"Comparaciones"),(0,l.kt)("p",null,"Podemos usar los mismo operadores logicos que usamos en los numeros para comparar strings. Estos\nson:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"==")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"!=")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},">")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"<"))),(0,l.kt)("p",null,"Al comparar ",(0,l.kt)("inlineCode",{parentName:"p"},"strings")," debemos tomar en consideracion dos cosas que hace el interpreter\nde ",(0,l.kt)("inlineCode",{parentName:"p"},"js"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"case-sensitive"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'"Y" != "y"\n')),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"Returns:")," True")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"internal-working"),"\nQuiere decir que el interpreter de ",(0,l.kt)("inlineCode",{parentName:"li"},"js")," compara caracter por caracter con su respectiva\nrepresentacion ",(0,l.kt)("inlineCode",{parentName:"li"},"ASCII")," para determinar si los caracteres son iguales")),(0,l.kt)("h3",{id:"boleanos"},"Boleanos"),(0,l.kt)("p",null,"Un ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean")," es un tipo de dato que solo puede contener dos valores ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," o ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),".\nCada que realizamos una comparacion en ",(0,l.kt)("inlineCode",{parentName:"p"},"js")," siempre como resultado tendremos un ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Los ",(0,l.kt)("inlineCode",{parentName:"p"},"booleans")," tambien se pueden representar con numeros ",(0,l.kt)("inlineCode",{parentName:"p"},"0")," es ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," y ",(0,l.kt)("inlineCode",{parentName:"p"},"1")," es `true"))),(0,l.kt)("h3",{id:"null-undefined-y-nan"},"Null, Undefined y NaN"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"null")," es un tipo de dato que represanta que el valor es nada, es decir, que\nel valor totalmente vacio.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"var signedIn = null;\nconsole.log(signedIn);\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Undefined")," es un tipo de dato que representa la ausencia de valor, es decir, que no tiene\nvalor.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"var signedIn;\nconsole.log(signedIn);\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"NaN")," viene de ",(0,l.kt)("inlineCode",{parentName:"li"},"Not-A-Number")," es un error que se produce\ncuando realizamos operaciones matematicas erroneas por ejemplo:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'// calcular la raiz cuadrada de un numero negativo retorna un NaN\nMath.sqrt(-10)\n\n// Tratar de dividr un string con un numero retorna NaN\n"hello"/5\n')),(0,l.kt)("h2",{id:"type-conversion"},"Type conversion"),(0,l.kt)("p",null,"Cada que utilizamos el operador ",(0,l.kt)("inlineCode",{parentName:"p"},"==")," lo que realiza el interpreter de ",(0,l.kt)("inlineCode",{parentName:"p"},"js")," es realizar una conversion\nnumerica a cada lado de los iguales para de ahi proceder a saber si dicha conversion numerica es igual."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'"1" == 1\n')),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"Return:")," true"),(0,l.kt)("pre",{parentName:"blockquote"},(0,l.kt)("code",{parentName:"pre",className:"language-js"},"0 == false\n")),(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"Return:")," true"),(0,l.kt)("pre",{parentName:"blockquote"},(0,l.kt)("code",{parentName:"pre",className:"language-js"},"' ' == false\n")),(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"Return:")," true")),(0,l.kt)("p",null,"Por eso debemos tenemos tener cuidado al utilizar el operador ",(0,l.kt)("inlineCode",{parentName:"p"},"=="),", por otro lado si no queremos realizar\ndicha conversion antes de realizar la comparacion usamos este operador ",(0,l.kt)("inlineCode",{parentName:"p"},"==="),"."),(0,l.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Por norma general es una mala practica usar el operador ",(0,l.kt)("inlineCode",{parentName:"p"},"==")," o ",(0,l.kt)("inlineCode",{parentName:"p"},"!=")," debido a que no representa realmente\nlas necesidades que estamos buscando, por ende, mejor usar siempre ",(0,l.kt)("inlineCode",{parentName:"p"},"===")," o ",(0,l.kt)("inlineCode",{parentName:"p"},"!==")),(0,l.kt)("p",{parentName:"div"},"Ejemplos:"),(0,l.kt)("pre",{parentName:"div"},(0,l.kt)("code",{parentName:"pre",className:"language-js"},'"1" === 1\n')),(0,l.kt)("blockquote",{parentName:"div"},(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"Return:")," false"),(0,l.kt)("pre",{parentName:"blockquote"},(0,l.kt)("code",{parentName:"pre",className:"language-js"},"0 === false\n")),(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"Return:")," false"),(0,l.kt)("pre",{parentName:"blockquote"},(0,l.kt)("code",{parentName:"pre",className:"language-js"},"0 !== true\n")),(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"Return:")," true")))),(0,l.kt)("h2",{id:"implicit-type-coercion"},"implicit type coercion"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Js")," es un lenguaje considerado como ",(0,l.kt)("inlineCode",{parentName:"p"},"loosely type language"),". Basicamente lo que significa es que\nal momento de escribir codigo de ",(0,l.kt)("inlineCode",{parentName:"p"},"Js")," no tenemos que especificar el tipo de dato de la variable. Por ende\nel interpreter de ",(0,l.kt)("inlineCode",{parentName:"p"},"js")," al momento de ejecutar el codigo automaticamente los convierte a sus ",(0,l.kt)("inlineCode",{parentName:"p"},'"apropiados"'),"\ntipos de datos."),(0,l.kt)("p",null,"Ejemplos:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'"julia" + 1\n')),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"Returns:"),' "julia1"')),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},(0,l.kt)("inlineCode",{parentName:"p"},"Strongly typed language"),": Son todos los lenguajes de programacion que generan errores al no coincidir\nlos tipos de datos"),(0,l.kt)("p",{parentName:"div"},"Ejemplo:"),(0,l.kt)("pre",{parentName:"div"},(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'int count = 1;\nstring name = "Julia";\ndouble num = 1.2932;\nfloat price = 2.99;\n')),(0,l.kt)("pre",{parentName:"div"},(0,l.kt)("code",{parentName:"pre",className:"language-js"},'// equivalent code in JavaScript\nvar count = 1; \nvar name = "Julia";\nvar num = 1.2932;\nvar price = 2.99;\n')))),(0,l.kt)("h2",{id:"semicolons"},"Semicolons"),(0,l.kt)("p",null,"Los semicolons son ",(0,l.kt)("inlineCode",{parentName:"p"},";")," y nos indica el final de cada linea, aunque ",(0,l.kt)("inlineCode",{parentName:"p"},"js")," trata de inferir\ncuando una linea de codigo termina al igual que ",(0,l.kt)("a",{parentName:"p",href:"#implicit-type-coercion"},"implicit type coercion"),". "),(0,l.kt)("p",null,"Es una buena practica al finalizar cada linea de codigo usar el ",(0,l.kt)("inlineCode",{parentName:"p"},";")," para prevenir algun\ncomportamiento extra\xf1o"),(0,l.kt)("h2",{id:"variables"},"Variables"),(0,l.kt)("p",null,"Las ",(0,l.kt)("inlineCode",{parentName:"p"},"variables")," son las responsables de almacenar informacion, podemos almacenar\ncualquier tipo de datos en las variables. Para mas informacion acerca de los tipos de datos\ndisponibles en js puedes ir a su ",(0,l.kt)("a",{parentName:"p",href:"#tipos-de-datos"},"seccion")),(0,l.kt)("p",null,"Para crear una variables necesitamos de 4 partes:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Usar la palabra reservada ",(0,l.kt)("inlineCode",{parentName:"li"},"var")),(0,l.kt)("li",{parentName:"ol"},"Nombrar a la variable ",(0,l.kt)("inlineCode",{parentName:"li"},"variableName")),(0,l.kt)("li",{parentName:"ol"},"Seguido del operador de asignacion ",(0,l.kt)("inlineCode",{parentName:"li"},"=")),(0,l.kt)("li",{parentName:"ol"},"El valor de la variable ",(0,l.kt)("inlineCode",{parentName:"li"},"value"))),(0,l.kt)("p",null,"Para crear una variable lo hacemos de la siguiente manera:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'var nombre = "Andres"\n\n')),(0,l.kt)("h3",{id:"naming-conventions"},"Naming Conventions"),(0,l.kt)("p",null,"Para escribir nombre de variables en ",(0,l.kt)("inlineCode",{parentName:"p"},"js")," usamos lo que se conoce como ",(0,l.kt)("inlineCode",{parentName:"p"},"camelCase"),".\nAdemas tratar de nombrar a las variables de forma que describa de la mejor forma que\nes lo que almacenan "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"var totalAfterTax = 53.03; // usar camelCase si el nombre de la variable tiene multiples palabras\nvar tip = 8; // usar lowercase si el nombre de la variables es solo de una palabra\n")),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},(0,l.kt)("inlineCode",{parentName:"p"},"camelCase")," significa la primera palabra empieza con minuscula y\ncada palabra siguiente empieza con mayuscula. No usar ",(0,l.kt)("inlineCode",{parentName:"p"},"camelCase")," no causara ningun\nproblema al momento de programar con ",(0,l.kt)("inlineCode",{parentName:"p"},"js")," solo que es necesario seguir las buenas\npracticas y los style guides para mas ",(0,l.kt)("a",{parentName:"p",href:"#style-guide"},"info")))),(0,l.kt)("h2",{id:"comentarios"},"Comentarios"),(0,l.kt)("p",null,"Los comentarios se usan mucho en cualquier lenguaje de programacion con el fin\nde incrementar la legibilidad del codigo, tambien se usan para recordar\nque trata de hacer la funcion al momento de refactorizar."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Para hacer comentarios en linea usamos los ",(0,l.kt)("inlineCode",{parentName:"li"},"//")),(0,l.kt)("li",{parentName:"ul"},"Para hacer bloques de comentarios usamos ",(0,l.kt)("inlineCode",{parentName:"li"},"/*")," para abrir el bloque mientras que\n",(0,l.kt)("inlineCode",{parentName:"li"},"*/")," para cerrar el bloque de comentario.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// Esto es un comentario en linea \n// Esto es otro comentario en linea \n\n/* esto es multiples \n   comentarios\n   en \n   linea\n*/\n")),(0,l.kt)("h2",{id:"condiciones"},"Condiciones"),(0,l.kt)("p",null,"Una herramienta muy util para pensar como la maquina\nes usar ",(0,l.kt)("inlineCode",{parentName:"p"},"diagramas de flujo"),"."),(0,l.kt)("h3",{id:"ifelse"},"If...Else"),(0,l.kt)("p",null,"Nuestra primera estructura de flujo es la condicion ",(0,l.kt)("inlineCode",{parentName:"p"},"if...else"),". Cosas a tener en cuenta\nsobre esta estructura condicional:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"El valor dentro del ",(0,l.kt)("inlineCode",{parentName:"li"},"if")," siempre sera convertido a ",(0,l.kt)("inlineCode",{parentName:"li"},"true")," o ",(0,l.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,l.kt)("li",{parentName:"ol"},"Depende de dicho valor se ejecuta el bloque del codigo, es decir, si sale ",(0,l.kt)("inlineCode",{parentName:"li"},"true"),"\nse ejecuta el bloque que acompa\xf1a al ",(0,l.kt)("inlineCode",{parentName:"li"},"if")," si es ",(0,l.kt)("inlineCode",{parentName:"li"},"false")," el bloque del ",(0,l.kt)("inlineCode",{parentName:"li"},"else"),"."),(0,l.kt)("li",{parentName:"ol"},"Nunca van a ejecutarse ambos bloques de codigos a la vez"),(0,l.kt)("li",{parentName:"ol"},"Los bloques de codigos son separados por llaves ",(0,l.kt)("inlineCode",{parentName:"li"},"{...}")," con el fin de separarlos.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"if (/* this expression is true */) {\n  // run this code\n} else {\n  // run this code\n}\n")),(0,l.kt)("h3",{id:"elseif"},"ElseIf"),(0,l.kt)("p",null,"En muchas de las situaciones dos condiciones son suficientes, pero que pasa en la caso\ndonde tenga una situacion mas compleja con mas de dos condiciones?. Aqui entra en juego\nel ",(0,l.kt)("inlineCode",{parentName:"p"},"else if")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'var weather = "sunny";\n\nif (weather === "snow") {\n  console.log("Bring a coat.");\n} else if (weather === "rain") {\n  console.log("Bring a rain jacket.");\n} else {\n  console.log("Wear what you have on.");\n}\n')),(0,l.kt)("h3",{id:"operadores-logicos"},"Operadores Logicos"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Operadores"),(0,l.kt)("th",{parentName:"tr",align:null},"Significado"),(0,l.kt)("th",{parentName:"tr",align:null},"Ejemplo"),(0,l.kt)("th",{parentName:"tr",align:null},"Como funciona?"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"&&")),(0,l.kt)("td",{parentName:"tr",align:null},"AND"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"valor1 && valor2")),(0,l.kt)("td",{parentName:"tr",align:null},"Retorna ",(0,l.kt)("inlineCode",{parentName:"td"},"true")," si los ",(0,l.kt)("strong",{parentName:"td"},"dos valores"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"valor1")," ",(0,l.kt)("strong",{parentName:"td"},"y")," ",(0,l.kt)("inlineCode",{parentName:"td"},"valor2")," son verdadero")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"!")),(0,l.kt)("td",{parentName:"tr",align:null},"NOT"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"!valor1")),(0,l.kt)("td",{parentName:"tr",align:null},"Retorna el valor ",(0,l.kt)("inlineCode",{parentName:"td"},"opuesto"),". Si  ",(0,l.kt)("inlineCode",{parentName:"td"},"valor1")," es ",(0,l.kt)("inlineCode",{parentName:"td"},"verdadero")," retorna ",(0,l.kt)("inlineCode",{parentName:"td"},"falso"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"|","|"),(0,l.kt)("td",{parentName:"tr",align:null},"OR"),(0,l.kt)("td",{parentName:"tr",align:null},"valor1 ","|","|"," valor2"),(0,l.kt)("td",{parentName:"tr",align:null},"Retorna ",(0,l.kt)("inlineCode",{parentName:"td"},"true")," si ",(0,l.kt)("strong",{parentName:"td"},"uno")," de los valores, ",(0,l.kt)("inlineCode",{parentName:"td"},"valor1")," ",(0,l.kt)("strong",{parentName:"td"},"y")," ",(0,l.kt)("inlineCode",{parentName:"td"},"valor2")," son verdadero")))),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Todas las expresiones logicas son evaluadas de izquierda a derecha,\nPodemos usar parentesis para darle mayor prioridad o agrupar expresiones."))),(0,l.kt)("h4",{id:"tablas-de-verdad"},"Tablas de verdad"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"A"),(0,l.kt)("th",{parentName:"tr",align:null},"B"),(0,l.kt)("th",{parentName:"tr",align:null},"A&&B"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"verdadero"),(0,l.kt)("td",{parentName:"tr",align:null},"verdadero"),(0,l.kt)("td",{parentName:"tr",align:null},"verdadero")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"verdadero"),(0,l.kt)("td",{parentName:"tr",align:null},"falso"),(0,l.kt)("td",{parentName:"tr",align:null},"falso")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"falso"),(0,l.kt)("td",{parentName:"tr",align:null},"verdadero"),(0,l.kt)("td",{parentName:"tr",align:null},"falso")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"falso"),(0,l.kt)("td",{parentName:"tr",align:null},"falso"),(0,l.kt)("td",{parentName:"tr",align:null},"falso")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"A"),(0,l.kt)("th",{parentName:"tr",align:null},"B"),(0,l.kt)("th",{parentName:"tr",align:null},"A","|","|","B"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"verdadero"),(0,l.kt)("td",{parentName:"tr",align:null},"verdadero"),(0,l.kt)("td",{parentName:"tr",align:null},"verdadero")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"verdadero"),(0,l.kt)("td",{parentName:"tr",align:null},"falso"),(0,l.kt)("td",{parentName:"tr",align:null},"verdadero")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"falso"),(0,l.kt)("td",{parentName:"tr",align:null},"verdadero"),(0,l.kt)("td",{parentName:"tr",align:null},"verdadero")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"falso"),(0,l.kt)("td",{parentName:"tr",align:null},"falso"),(0,l.kt)("td",{parentName:"tr",align:null},"falso")))),(0,l.kt)("h3",{id:"truthy-and-falsy"},"Truthy and Falsy"),(0,l.kt)("p",null,"En Javascript tenemos el concepto de inherit, esto se debe a que el interpreter\ntransforma la expresion al contexto que se esta usando. Si estamos en el contexto\nbooleano toda la expresion la convertira a sus especificos valores booleanos."),(0,l.kt)("p",null,"Algunos valores que por default al transformarlo al contexto booleano retornan ",(0,l.kt)("inlineCode",{parentName:"p"},"falso")),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"false")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"null")," "),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"undefined")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"0")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},'""')),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"NaN"))),(0,l.kt)("p",null,"Todos los valores que no pertenezcan a esta lista son considerados ",(0,l.kt)("inlineCode",{parentName:"p"},"truthy")," value. Lo\nque quiere decir que dichas expresiones al ser evaluadas en el contexto booleano retornan\n",(0,l.kt)("inlineCode",{parentName:"p"},"verdadero")),(0,l.kt)("p",null,"Por ejemplo:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},'"null"')),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"2")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"[]")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"{}")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"true"))),(0,l.kt)("h3",{id:"operador-ternario"},"Operador Ternario"),(0,l.kt)("p",null,"El operador ternario es una forma de re escribir el tradicional ",(0,l.kt)("inlineCode",{parentName:"p"},"if else")," de una forma\nmas corta y legible"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"condicion ? (si la condicion es verdadera) : (si la condicion es falsa)\n")),(0,l.kt)("p",null,"Ejemplo "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'var isGoing = true;\nvar color;\n\nif (isGoing) {\n  color = "green";\n} else {\n  color = "red";\n}\n')),(0,l.kt)("p",null,"Este bloque de codigo lo podemos cambiar por "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'var isGoing = true;\nvar color = isGoing ? "green" : "red";\n')),(0,l.kt)("h3",{id:"switch"},"Switch"),(0,l.kt)("p",null,"Una forma de refactorizar los ",(0,l.kt)("inlineCode",{parentName:"p"},"if else")," encadenados es usar ",(0,l.kt)("inlineCode",{parentName:"p"},"switch")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'if (option === 1) {\n  console.log("You selected option 1.");\n} else if (option === 2) {\n  console.log("You selected option 2.");\n} else if (option === 3) {\n  console.log("You selected option 3.");\n} else if (option === 4) {\n  console.log("You selected option 4.");\n} else if (option === 5) {\n  console.log("You selected option 5.");\n} else if (option === 6) {\n  console.log("You selected option 6.");\n}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'var option = 3;\n\nswitch (option) {\n  case 1:\n    console.log("You selected option 1.");\n    break;\n  case 2:\n    console.log("You selected option 2.");\n    break;\n  case 3:\n    console.log("You selected option 3.");\n    break;\n  case 4:\n    console.log("You selected option 4.");\n    break;\n  case 5:\n    console.log("You selected option 5.");\n    break;\n  case 6:\n    console.log("You selected option 6.");\n    break; // technically, not needed\n}\n')),(0,l.kt)("h2",{id:"bucles"},"Bucles"),(0,l.kt)("p",null,"Los bucles nos ayuda a ejecutar un bloque de codigo repetidamente\npor un numero fijo de veces o mientras cumplamos alguna condicion.\nBasicamente todos los bucles nos ayudan a repetir un bloque de codigo\nuna cantidad x de veces."),(0,l.kt)("p",null,"Existen 3 partes importantes que todos los bucles tienen los cuales son:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Cuando empezar")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Cuando terminar")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Como obtenemos el siguiente elemento"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"\nvar start = 0; // when to start\nwhile (start < 10) { // when to stop\n  console.log(start);\n  start = start + 2; // how to get to the next item\n}\n")),(0,l.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Si no tenemos la condicion de cuando terminar tendremos un bucle infinito\xdf"))),(0,l.kt)("h3",{id:"bucle-while"},"Bucle While"),(0,l.kt)("p",null,"El bucle while nos permite repetir un bloque de codigo cuantas veces\nla condicion sea verdadera veamos un ejemplo de como contar del 1 al\n1000"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"var number = 0; // empiezo\nwhile (numer <= 10000) { // cuando termino\n  console.log(number);\n  number = number + 1; // paso al siguiente iteracion\n}\n")),(0,l.kt)("h3",{id:"bucle-for"},"Bucle For"),(0,l.kt)("p",null,"La principal diferencia entre el bucle for y el while es que en el for\ndebemos escribir las 3 partes que todo bucle debe tener de forma explicita"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"for ( inicio; fin; paso ) {\n  // do this thing\n}\n")),(0,l.kt)("h3",{id:"bucles-anidados"},"Bucles anidados"),(0,l.kt)("p",null,"Son bucles dentro de otros bucles "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"for(var i = 0; i < 6; i++){\n  for(var x = 0; x < 3; x++){\n    console.log(x, y);\n  }\n}\n")),(0,l.kt)("h3",{id:"incrementos-y-decrementos"},"Incrementos y Decrementos"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"x++ or ++x // lo mismo que x = x + 1 \nx-- or --x // lo mismo que x = x - 1\nx += 3 // lo mismo que x = x + 3\nx -= 6 // lo mismo que x = x - 6\nx *= 2 // lo mismo que x = x * 2\nx /= 5 // lo mismo que x = x / 5\n")),(0,l.kt)("h2",{id:"scopes"},"Scopes"),(0,l.kt)("p",null,"El scope basicamente viene a ser como el alcance de algo, el alcance de una variable\no el alcance de una funcion. Existen 3 tipos de scope en JS"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Global scope: Es cuando podemos usar la variable en cualquier parte del codigo\naqui podemos decir que las variables son ",(0,l.kt)("inlineCode",{parentName:"p"},"globales"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Function scope: Solo podemos usar la variable dentro de la funcion aqui podemos\ndecir que las variables son ",(0,l.kt)("inlineCode",{parentName:"p"},"locales"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Block scope: Solo podemos usar la variable dentro de ",(0,l.kt)("inlineCode",{parentName:"p"},"{}")))),(0,l.kt)("p",null,"Podemos usar este ejemplo para ver la relacion de los scopes "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'/*\n * Global scope. \n * This variable declared outside of any function is called Global variable. \n * Hence, you can use this anywhere in the code\n */\nvar opinion = "This nanodegree is amazing";\n\n// Function scope\nfunction showMessage() {\n    // Local variable, visible within the function `showMessage`\n    var message = "I am an Udacian!"; \n\n    // Block scope\n    {\n          let greet = "How are you doing?";\n        /*\n         * We have used the keyword `let` to declare a variable `greet` because variables declared with the `var` keyword can not have Block Scope. \n         */\n    } // block scope ends\n\n    console.log( message ); // OK\n    console.log( greet ); // ERROR. \n    // Variable greet can NOT be used outside the block\n\n    console.log( opinion ); // OK    to use the gobal variable anywhere in the code\n\n} // function scope ends\n')),(0,l.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Tratar de lo posible no usar global scope o variables globales\nya que estas al final pueden sufrir de ",(0,l.kt)("a",{parentName:"p",href:"#shadowing"},"shadowing")," o conflicto de\nnombres"))),(0,l.kt)("h3",{id:"declaracion-de-variables"},"Declaracion de variables"),(0,l.kt)("p",null,"Hay 3 formas de poder declarar variables dentro de js:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"let")," es una nueva forma de declarar variables en cualquier\nscope en js. El valor de la variable pueed ser cambiado o reasignado\nen cualquier parte del codigo")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"const")," es una forma de declarar constantes en cualquier\nparte del scope (global, function or block) y este valor no puede ser\ncambiado o reasignado en ninguna parte del codigo")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"var")," era la forma antigua de declarar variables en js. Solo podemos\ndeclararla en dos tipos de scopes (global y function)."))),(0,l.kt)("h2",{id:"funciones"},"Funciones"),(0,l.kt)("p",null,"las funciones son bloques de codigo que podemos reutilizar a lo largo del\ncodigo con el fin de no estar repitiendo tantas veces el mismo codigo. Es\ncomo una forma de empaquetar funcionalidades que se repiten."),(0,l.kt)("p",null,"Podemos tener una funcion con multiples parametros "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"function doubleGreeting(name, otherName) {\n  // code to greet two people!\n}\n")),(0,l.kt)("p",null,"O podemos tener una funcion sin parametros"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'function sayHello() {\n  var message = "Hello!"\n  console.log(message);\n}\n')),(0,l.kt)("p",null,"Las funciones tienen dos estados cuando las declaramos y cuando las llamamos\nejemplos anteriores son declaracion de funciones pero para llamarlas hacemos lo\nsiguiente "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'// declarar la variables say hello\nfunction sayHello() {\n  var message = "Hello!"\n  return message; // returns value instead of printing it\n}\n\n// llamamos a la funcion sayHello()\nconsole.log(sayHello());\n\n')),(0,l.kt)("h3",{id:"parametros-vs-argumentos"},"Parametros vs Argumentos"),(0,l.kt)("p",null,"Los parametros son las variables que escribimos cuando declaramos una funcion,\nmientras que los argumentos son los valores que toman esos parametros cuando\ninvocamos a la funcion."),(0,l.kt)("p",null,"ejemplo "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// a y b son parametros de la funcion\nfunction findAverage(a, b) {\n  var answer = (a + b) / 2;\n  return answer;\n}\n// 5 y 9 son los argumentos de la funcion\nvar avg = findAverage(5, 9);\n")),(0,l.kt)("h3",{id:"return"},"Return"),(0,l.kt)("p",null,"La palabra reservada ",(0,l.kt)("inlineCode",{parentName:"p"},"return")," nos permite detener la ejecucion de una funcion\ny retorna un valor de vuelta al que la invoco."),(0,l.kt)("p",null,"Sino definimos el valor a retornar en la funcion por defecto retorna ",(0,l.kt)("inlineCode",{parentName:"p"},"undefined")),(0,l.kt)("h3",{id:"shadowing"},"Shadowing"),(0,l.kt)("p",null,"es cuando reeescribrimos una variable del scope, es decir, tenemos una variable\nglobal y dentro de una funcion reescribrimos o cambiamos su valor."),(0,l.kt)("p",null,"Ejemplo cuando hacemos shadowing"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"\nvar x = 1;\n\nfunction addTwo() {\n  x = x + 2;\n}\n\naddTwo();\nx = x + 1;\nconsole.log(x); // imprime 4\n")),(0,l.kt)("p",null,"Ejemplo como no hacer shadowing "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"var x = 1;\n\nfunction addTwo() {\n  var x = x + 2;\n}\n\naddTwo();\nx = x + 1;\nconsole.log(x); // imprime 2 \n")),(0,l.kt)("h3",{id:"hoisting"},"Hoisting"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Js al momento de interpretar el codigo eleva todas las funciones del codigo\ny ademas todas las declaraciones de las variables."),(0,l.kt)("li",{parentName:"ul"},"No eleva la asignacion de las variables.")),(0,l.kt)("p",null,"Ejemplo 1\nEsto es lo que escribimos "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'sayHi("Julia"); // imprime -> undefined Julia\n\nfunction sayHi(name) {\n  console.log(greeting + " " + name);\n  var greeting;\n}\n')),(0,l.kt)("p",null,"Esto es lo que interpreta la computadora"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'function sayHi(name) {\n  var greeting;\n  console.log(greeting + " " + name);\n  \n}\nsayHi("Julia"); // por eso imprime -> undefined Julia\n')),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"recordemos que siempre que declaramos una variable\nsino le asignamos ningun valor, su valor por defecto sera\n",(0,l.kt)("a",{parentName:"p",href:"#null-undefined-y-nan"},"undefined")))),(0,l.kt)("p",null,"Ejemplo 2\nEsto es lo que escribimos "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'sayHi("Julia"); // imprime -> undefined Julia\n\nfunction sayHi(name) {\n  console.log(greeting + " " + name);\n  var greeting = "Hello";\n}\n')),(0,l.kt)("p",null,"Esto es lo que la computadora interpreta"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'function sayHi(name) {\n  var greeting;\n  console.log(greeting + " " + name);\n  greeting = "Hello";\n  \n}\nsayHi("Julia"); // por eso imprime -> undefined Julia\n')),(0,l.kt)("p",null,"Ejemplo 3 (Asi evitamos el hoisting)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'function sayHi(name) {\n  var greeting = "Hello";\n  console.log(greeting + " " + name);\n}\n\nsayHi("Julia");\n')),(0,l.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Para poder evitar el hoisting debemos mantener la declaracion de nuestras\nfunciones arriba y la declaracion y asignacion de nuestras variables arriba\ntambien"))),(0,l.kt)("h3",{id:"function-expression"},"Function expression"),(0,l.kt)("p",null,"es una nueva forma para declarar una funcion, debido a que usamos\nuna variable para declararla. Es decir cuando una funcion es\nalmacenada en una variable."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'var catSays = function(max) {\n  var catMessage = "";\n  for (var i = 0; i < max; i++) {\n    catMessage += "meow ";\n  }\n  return catMessage;\n};\n\n')),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"las funciones que no tienen nombres se las conoce como funciones\nanonimas\neste tipo de funciones son buenas para evitar el hoisting por lo\nque esta relacionado con la asignacion de variables y no con la\ndeclaracion."))),(0,l.kt)("h4",{id:"callbacks"},"Callbacks"),(0,l.kt)("p",null,"son las funciones que se pasan como argumento a otras funciones"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'// function expression catSays\nvar catSays = function(max) {\n  var catMessage = "";\n  for (var i = 0; i < max; i++) {\n    catMessage += "meow ";\n  }\n  return catMessage;\n};\n\n// function declaration helloCat accepting a callback\nfunction helloCat(callbackFunc) {\n  return "Hello " + callbackFunc(3);\n}\n\n// pass in catSays as a callback function\nhelloCat(catSays);\n')),(0,l.kt)("h2",{id:"arrays"},"Arrays"),(0,l.kt)("p",null,"Los arrays es una estructura de datos que nos permite almacenar\nmultiples valores ademas son organizados. Los arrays empiezan\ndesde el 0 y no desde el 1 como normalmente nosotros listamos\nlos elementos de una lista. Cada elemento en un array debe estar\nseparado por una coma"),(0,l.kt)("p",null,"Podemos crear un array con ",(0,l.kt)("inlineCode",{parentName:"p"},"[]")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'// creaamos a `donuts` array con 3 elementos de tipo string\nvar donuts = ["glazed", "powdered", "jelly"];\n')),(0,l.kt)("p",null,"tambien podemos crear arrays con multiplos tipos de datos "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'// creamos a `mixedData` array con una mezcla de tipos de datos\nvar mixedData = ["abcd", 1, true, undefined, null, "all the things"];\n')),(0,l.kt)("p",null,"Tambien podemos tener arrays anidados y normalmente escribimos\ncada elemento en lineas separadas con el fin de mejorar\nla legibilidad "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'var arraysInArrays = [\n  [1, 2, 3], \n  ["Julia", "James"], \n  [true, false, true, false]\n];\n')),(0,l.kt)("h3",{id:"indexing-1"},"Indexing"),(0,l.kt)("p",null,"Los indices empiezan desde 0, para acceder a un elemento podemos\nusar su posicion y ademas los brackets ",(0,l.kt)("inlineCode",{parentName:"p"},"[]")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'var donuts = ["glazed", "powdered", "sprinkled"];\nconsole.log(donuts[0]); // "glazed" is the first element in the `donuts` array\n')),(0,l.kt)("p",null,"Si usamos un indice para un elemento que no existe, js retorna\n",(0,l.kt)("inlineCode",{parentName:"p"},"undefined")),(0,l.kt)("p",null,"Para cambiar un elemento del array podemos hacer lo siguiente "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'donuts[1] = "glazed cruller"; // changes the second element in the `donuts` array to "glazed cruller"\nconsole.log(donuts[1]); \n')),(0,l.kt)("h3",{id:"propiedades"},"Propiedades"),(0,l.kt)("p",null,"Es informacion relevante sobre la estructura de datos "),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"length")," es la propiedad mas comun de los arrays, la\ncual nos permite saber cuantos elementos almacena."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'var donuts = ["glazed", "powdered", "sprinkled"];\nconsole.log(donuts.length); // imprime 3\n')),(0,l.kt)("h3",{id:"metodos"},"Metodos"),(0,l.kt)("p",null,"Los metodos en los arrays son funciones que nos permiten\nmodificar o hacer diferentes funciones con el array"),(0,l.kt)("p",null,"los metodos mas comunes en los arays son:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Reverse: nos permite hacer un reverso en el orden\nde los elementos")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Sort nos permite mezclar los elementos de un array ")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Push nos permite agregar elementos al final del array, ademas\nretorna la cantidad de elementos del array despues de agregar\nal nuevo elemento. Su contraparte es unshift ya que agrega\nen la primera posicion los elementos.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"POP Nos permite sacar el ultimo elemento del array, ademas\nretorna el elemento que saco, su contraparte es shift ya que\nelimina el primer elemento del array")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Por otro lado splice nos permite sacar elementos y en la misma\nposicion agregar nuevos elementos agregar elementos en cualquier\nparte del array"))),(0,l.kt)("h3",{id:"bucles-1"},"Bucles"),(0,l.kt)("p",null,"Cuando queremos hacer cambios en diferentes elementos de un array\nuna posible solucion seria saber su indice y actualizarlo, esto\nse puede convertir en una tarea bastante tediosa si tenemos que\nhacerlo con muchos elementos para este tipo de siutaciones podemos\nusar bucles."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'var donuts = ["jelly donut", "chocolate donut", "glazed donut"];\n\n// the variable `i` is used to step through each element in the array\nfor (var i = 0; i < donuts.length; i++) {\n    donuts[i] += " hole";\n    donuts[i] = donuts[i].toUpperCase();\n}\n')),(0,l.kt)("p",null,"con ese bloque de codigo podemos recorrer los elementos de un\narreglo"),(0,l.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Utilizar un for a secas es una buena forma de recorrer un arreglo\ncuando queremos versatilidad o solo vamos a recorrer una\nparte del arreglo"))),(0,l.kt)("h4",{id:"foreach"},"Foreach"),(0,l.kt)("p",null,"Es una forma mas elegante de poder recorrer un arreglo si sabes\ncon inline que lo vas a recorrer de principio a fin\nfunctions expresions"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'words = ["cat", "in", "hat"];\nwords.forEach(function(element, index, array) {\n  console.log("Word " + index + " in " + array.toString() + " is " + element);\n});\n')),(0,l.kt)("p",null,"donde:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"element representa al elemento como tal del array. "),(0,l.kt)("li",{parentName:"ul"},"index representa el indice de la posicion del elemento. "),(0,l.kt)("li",{parentName:"ul"},"array es una copia de todo el array.")),(0,l.kt)("h4",{id:"map"},"Map"),(0,l.kt)("p",null,"Otra forma de recorrer un arreglo bastante parecida al ",(0,l.kt)("inlineCode",{parentName:"p"},"forEach"),"\npero su principal diferencia es que creamos un nuevo arreglo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'var donuts = ["jelly donut", "chocolate donut", "glazed donut"];\n\nvar improvedDonuts = donuts.map(function(donut) {\n  donut += " hole";\n  donut = donut.toUpperCase();\n  return donut;\n});\n')),(0,l.kt)("h3",{id:"arrays-in-arrays"},"Arrays in Arrays"),(0,l.kt)("p",null,"En algunas ocasiones podemos tener arreglos dentro de arreglos\ncon el fin de formar grids o matrices"),(0,l.kt)("p",null,"Podemos obtener los elementos de una fila de la siguiente manera"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'\nvar donutBox = [\n  ["glazed", "chocolate glazed", "cinnamon"],\n  ["powdered", "sprinkled", "glazed cruller"],\n  ["chocolate cruller", "Boston creme", "creme de leche"]\n];\n\n// here, donutBox.length refers to the number of rows of donuts\nfor (var row = 0; row < donutBox.length; row++) {\n  console.log(donutBox[row]);\n}\n')),(0,l.kt)("p",null,"mientras que para tener todos los elementos de forma individual\npodemos hacer lo siguiente "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"for (var row = 0; row < donutBox.length; row++) {\n  // here, donutBox[row].length refers to the length of the donut array currently being looped over\n  for (var column = 0; column < donutBox[row].length; column++) {\n    console.log(donutBox[row][column]);\n  }\n}\n")),(0,l.kt)("h2",{id:"objetos"},"Objetos"),(0,l.kt)("p",null,"Sirven para encapsular toda la informacion y metodos o\nfuncionalidades en nuestras propieas entidades. Seria como definir\nnuestros propios arrays. En otras palabras\nes una estructura de datos que permite encapsular entidades por\nmedio de ",(0,l.kt)("inlineCode",{parentName:"p"},"keys"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'var sister = {\n  name: "Sarah", \n  age: 23,\n  parents: [ "alice", "andy" ],\n  siblings: ["julia"],\n  favoriteColor: "purple",\n  pets: true\n};\n')),(0,l.kt)("p",null,"Algunas cosas que debemos recordar cuando creamos ",(0,l.kt)("inlineCode",{parentName:"p"},"objetos")," en js."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"La ",(0,l.kt)("inlineCode",{parentName:"p"},"key")," representa una propiedad o un metodo y su valor\nlo separamos por medio de ",(0,l.kt)("inlineCode",{parentName:"p"},":"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"el conjunto ",(0,l.kt)("inlineCode",{parentName:"p"},"key:value")," los separamos entre commas ",(0,l.kt)("inlineCode",{parentName:"p"},","))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"El objeto esta encerrado por ",(0,l.kt)("inlineCode",{parentName:"p"},"{}")))),(0,l.kt)("p",null,"Para acceder a los valores de sus parametros los podemos hacer\nde las siguientes formas "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'\nsister["parents"] // bracket notation\nsister.parents // dot notation\n// ambos retornan [ "alice", "andy" ]\n')),(0,l.kt)("h3",{id:"naming-conventions-1"},"Naming conventions"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"No usar comillas para las ",(0,l.kt)("inlineCode",{parentName:"li"},"keys"),". La razon es sencilla podemos\nllegar a tener error cuando usemos dot notation"),(0,l.kt)("li",{parentName:"ul"},"No empezar con numeros para las ",(0,l.kt)("inlineCode",{parentName:"li"},"keys"),". sale error al usar\ndot notation"),(0,l.kt)("li",{parentName:"ul"},'Dentro de las keys si usamos multiples paralabra como "primer nombre" no usar espacios o caracteres especiales, es mejor usar\ncamelCase "primerNombre"')),(0,l.kt)("h2",{id:"es6"},"ES6"),(0,l.kt)("h3",{id:"template-literal"},"Template literal"),(0,l.kt)("p",null,"es una nueva forma de usar strings interpolation o concatenacion\nde strings cambios los ",(0,l.kt)("inlineCode",{parentName:"p"},"'' or \"\""),' por "`',(0,l.kt)("inlineCode",{parentName:"p"},'". Ademas que podemos \nrepresentar expresiones o agregar variablesde la siguiente forma \n'),"${expression}`"),(0,l.kt)("h3",{id:"destructing"},"Destructing"),(0,l.kt)("p",null,"Es una forma mas corta de extraer multiples elememtos de un array\no de un objeto "),(0,l.kt)("p",null,"Antes de ES6 hacemos "),(0,l.kt)("p",null,"Para arreglos"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const point = [10, 25, -34];\n\nconst x = point[0];\nconst y = point[1];\nconst z = point[2];\n\nconsole.log(x, y, z);\n")),(0,l.kt)("p",null,"Para objetos"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const gemstone = {\n  type: 'quartz',\n  color: 'rose',\n  carat: 21.29\n};\n\nconst type = gemstone.type;\nconst color = gemstone.color;\nconst carat = gemstone.carat;\n\nconsole.log(type, color, carat);\n")),(0,l.kt)("p",null,"Despues de ES6"),(0,l.kt)("p",null,"Para arreglos"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const point = [10, 25, -34];\n\nconst [x, y, z] = point;\n\nconsole.log(x, y, z);\n")),(0,l.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Podemos saltarnos elementos de la siguiente forma\n",(0,l.kt)("inlineCode",{parentName:"p"},"const [x, , z] = point;")))),(0,l.kt)("p",null,"Para objetos"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const gemstone = {\n  type: 'quartz',\n  color: 'rose',\n  carat: 21.29\n};\n\nconst {type, color, carat} = gemstone;\n\nconsole.log(type, color, carat);\n")),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"en objetos agarramos el valor de la clave, si solo queremos un\nelemento hacemos lo siguiente ",(0,l.kt)("inlineCode",{parentName:"p"},"let {color} = gemstone;")))),(0,l.kt)("h3",{id:"object-literal-shorthand"},"Object Literal Shorthand"),(0,l.kt)("p",null,"Es una forma mas corta de declarar metodos y parametros en los\nobjetos, es muy util cuando tenemos variables con los nombres\nde las claves que queremos en nuestros objetos."),(0,l.kt)("p",null,"Antes de ES6"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let type = 'quartz';\nlet color = 'rose';\nlet carat = 21.29;\n\nconst gemstone = {\n  type: type,\n  color: color,\n  carat: carat\n};\n\nconsole.log(gemstone);\n")),(0,l.kt)("p",null,"Despues de ES6"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let gemstone = {\n  type,\n  color,\n  carat,\n  calculateWorth() { ... }\n};\n")),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"para los metodos tampoco es necesario usar la palabra reservada\n",(0,l.kt)("inlineCode",{parentName:"p"},"function")))),(0,l.kt)("h3",{id:"iteration"},"Iteration"),(0,l.kt)("p",null,"Bueno la manera mas comun que teniamos para iterar era usar el for loop, que ya hemos aprendido\nahora con es6 tenemos una manera mas sencilla de iterar muy parecida a python "),(0,l.kt)("p",null,"sin es6"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\nfor(let i = 0; i < digits.length; i++){\n  console.log(digits[i]);\n}\n\n")),(0,l.kt)("p",null,"con es6"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\nfor (let digit of digits){\n  console.log(digit);\n}\n")),(0,l.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Es una buena practica nombrar a los arreglos en plural asi cuando\ntengamos que recorrerlos y usemos un ",(0,l.kt)("inlineCode",{parentName:"p"},"bucle for")," podemos nombrar la variable\ncomo su singular\n",(0,l.kt)("inlineCode",{parentName:"p"},"for (const button of buttons) {...}.")))),(0,l.kt)("p",null,"Ademas que podemos detener el bucle en cualquier momento o si agregamos nuevas funciones\nal ",(0,l.kt)("inlineCode",{parentName:"p"},"Array.prototype.decimalfy")," no se ve afectado nuestro array."),(0,l.kt)("h3",{id:"spread-operator"},"Spread Operator"),(0,l.kt)("p",null,"Es un nuevo operador que viene en es6 y nos permite expandir nuestros objetos iterables "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'const books = ["Don Quixote", "The Hobbit", "Alice in Wonderland", "Tale of Two Cities"];\nconsole.log(...books);\n')),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"Prints:")," Don Quixote The Hobbit Alice in Wonderland Tale of Two Cities")),(0,l.kt)("p",null,"Esto podria ser util cuando queremos combinar o concatenar arrays "),(0,l.kt)("p",null,"sin es6 "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'const fruits = ["apples", "bananas", "pears"];\nconst vegetables = ["corn", "potatoes", "carrots"];\nconst produce = fruits.concat(vegetables);\nconsole.log(produce);\n')),(0,l.kt)("p",null,"con es6"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'const fruits = ["apples", "bananas", "pears"];\nconst vegetables = ["corn", "potatoes", "carrots"];\n\nconst produce = [...fruits, ...vegetables];\n\nconsole.log(produce);\n')),(0,l.kt)("h3",{id:"rest-parameter"},"Rest Parameter"),(0,l.kt)("p",null,"es usar el spread operator al resves, lo que hago es agrupar los elementos (empaquetarlos)"),(0,l.kt)("p",null,"es muy usado para hacer funciones con multiples parametros."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"function sum(...nums) {\n  let total = 0;  \n  for(const num of nums) {\n    total += num;\n  }\n  return total;\n}\n")),(0,l.kt)("p",null,"asi lo compacto y solo tengo un array con todos los parametros que le agregue al momento de\ninvocar la funcion"),(0,l.kt)("h3",{id:"arrow-functions"},"Arrow functions"),(0,l.kt)("p",null,"Hacen lo mismo que las funciones normales pero cambia su forma\nde escribirlas veamos un ejemplo "),(0,l.kt)("p",null,"funcion normnal"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const upperizedNames = ['Farrin', 'Kagure', 'Asser'].map(function(name) { \n  return name.toUpperCase();\n});\n")),(0,l.kt)("p",null,"arrow function"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const upperizedNames = ['Farrin', 'Kagure', 'Asser'].map(name => name.toUpperCase());\n")),(0,l.kt)("p",null,"Podemos usar parentesis antes de la flecha para los argumentos,\nseparar varios argumentos o no pasar argumentos. Es mas legible y\nse entiende mejor "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// sin parametros necesita parentesis\nconst sayHi = () => console.log('Hello Udacity Student!');\nsayHi();\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// multiples parametros necesita parentesis \nconst orderIceCream = (flavor, cone) => console.log(`Here's your ${flavor} ice cream in a ${cone} cone.`);\norderIceCream('chocolate', 'waffle');\n")),(0,l.kt)("p",null,"Aunque las arrow functions presentan muchas ventajas como:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"son mas faciles de escribir "),(0,l.kt)("li",{parentName:"ul"},"tienen mejor legibilidad "),(0,l.kt)("li",{parentName:"ul"},"automaticamente pueden retorna valores si usamos consice body\nsyntax")),(0,l.kt)("p",null,"Tienen una gran desventaja:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Tienen un problema con la palabra reservada ",(0,l.kt)("inlineCode",{parentName:"li"},"this"),"  "),(0,l.kt)("li",{parentName:"ul"},"Ademas que son solo expresiones y no podemos declararlas para\nusarlas despues ")),(0,l.kt)("h4",{id:"concise-and-block-body-syntax"},"Concise and block body syntax"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Concise body syntax")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"No lleva llaves para agrupar el bloque de codigo "),(0,l.kt)("li",{parentName:"ul"},"Automaticamente retorna la expresion ")),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Solo se usa cuando tenemos una linea de codigo"))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Block body syntax")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Usa llaves para agrupar el bloque de codigo"),(0,l.kt)("li",{parentName:"ul"},"Necesitamos un return para que la funcion devuelva algo",(0,l.kt)("div",{parentName:"li",className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Se usa cuando tenemos multiples lineas de codigo en nuestra\nfuncion "))))),(0,l.kt)("h3",{id:"default-function-parameters"},"Default function parameters"),(0,l.kt)("p",null,"Muy parecido a python es una forma de poner valores por defecto\na los parametros si ningun argumento es pasado al momento de\nllamar a la funcion "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"function greet(name = 'Student', greeting = 'Welcome') {\n  return `${greeting} ${name}!`;\n}\n\ngreet(); // Welcome Student!\ngreet('James'); // Welcome James!\ngreet('Richard', 'Howdy'); // Howdy Richard!\n")),(0,l.kt)("h4",{id:"destructuring"},"Destructuring"),(0,l.kt)("p",null,"Podemos crear defaults en los elementos de un objeto o array\nque queremos hacer destructuring "),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arrays")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"function createGrid([width = 5, height = 5]) {\n  return `Generates a ${width} x ${height} grid`;\n}\n\ncreateGrid([]); // Generates a 5 x 5 grid\ncreateGrid([2]); // Generates a 2 x 5 grid\ncreateGrid([2, 3]); // Generates a 2 x 3 grid\ncreateGrid([undefined, 3]);\n")),(0,l.kt)("p",null,"ahora el problema con hacer esto es que estamos diciendo\nque un array debe ser pasado aunque este vacio, por ende\nsi ejecutamos el siguiente codigo saldra error "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"createGrid(); // throws an error\n")),(0,l.kt)("p",null,"Para poder arreglar esto podemos usar de nuevo defaults y decir\nque el parametro por default le viene un array vacio y al hacer\ndestructuring tenemos que los dos elementos del array toman el\nvalor de 5 "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"function createGrid([width = 5, height = 5] = []) {\n  return `Generates a ${width} x ${height} grid`;\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Objetos")),(0,l.kt)("p",null,"De la misma manera podemos hacer algo similar con los objetos "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"function createSundae({scoops = 1, toppings = ['Hot Fudge']}) {\n  const scoopText = scoops === 1 ? 'scoop' : 'scoops';\n  return `Your sundae has ${scoops} ${scoopText} with ${toppings.join(' and ')} toppings.`;\n}\n\ncreateSundae({}); // Your sundae has 1 scoop with Hot Fudge toppings.\ncreateSundae({scoops: 2}); // Your sundae has 2 scoops with Hot Fudge toppings.\ncreateSundae({scoops: 2, toppings: ['Sprinkles']}); // Your sundae has 2 scoops with Sprinkles toppings.\ncreateSundae({toppings: ['Cookie Dough']});\n")),(0,l.kt)("p",null,"y obviamente este tiene el mismo error que el codigo anterior\nespera un objeto vacio y sino le paso un objeto me dara error\nporque no puede hacer destructuring a ",(0,l.kt)("inlineCode",{parentName:"p"},"undefined")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"function createSundae({scoops = 1, toppings = ['Hot Fudge']} = {}) {\n  const scoopText = scoops === 1 ? 'scoop' : 'scoops';\n  return `Your sundae has ${scoops} ${scoopText} with ${toppings.join(' and ')} toppings.`;\n}\n")),(0,l.kt)("p",null,"asi lo arreglamos y con eso ya podemos ejecutar esto "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"createSundae(); // Your sundae has 1 scoop with Hot Fudge toppings.\n")),(0,l.kt)("p",null,"Una ventaja que tienes los objetos sobre los arrays es que\ncomo los arrays son posicional no puedes solo pasar un argumento\ny que sea el segundo sino que deberias hacer lo siguiente"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"createSundae([undefined, ['Hot Fudge', 'Sprinkles', 'Caramel']]);\n")),(0,l.kt)("p",null,"los parametros que quisieras skipear le pones ",(0,l.kt)("inlineCode",{parentName:"p"},"undefined")),(0,l.kt)("h3",{id:"classes"},"Classes"),(0,l.kt)("p",null,"Practicamente son funciones con herencia donde todo sucede por\ndebajo y no tenemos que preocuparnos por hacer el ",(0,l.kt)("inlineCode",{parentName:"p"},"prototype")),(0,l.kt)("p",null,"Antes de es6"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"function Plane(numEngines) {\n  this.numEngines = numEngines;\n  this.enginesActive = false;\n}\n\n// methods \"inherited\" by all instances\nPlane.prototype.startEngines = function () {\n  console.log('starting engines...');\n  this.enginesActive = true;\n};\n\nvar richardsPlane = new Plane(1);\nrichardsPlane.startEngines();\n\nvar jamesPlane = new Plane(4);\njamesPlane.startEngines();\n")),(0,l.kt)("p",null,"despues del es6"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"class Plane {\n  constructor(numEngines) {\n    this.numEngines = numEngines;\n    this.enginesActive = false;\n  }\n\n  startEngines() {\n    console.log('starting engines\u2026');\n    this.enginesActive = true;\n  }\n}\n")),(0,l.kt)("p",null,"Ambos funcionan igual, es decir, la palabra reservada ",(0,l.kt)("inlineCode",{parentName:"p"},"class"),"\nes solo una funcion fancy."),(0,l.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Para separar metodos dentro de las clases no usamos commas,\nsi ponemos una coma para separar metodos nos dara un error"))),(0,l.kt)("h4",{id:"static-methods"},"Static methods"),(0,l.kt)("p",null,"Podemos tener metodos que se pueden ejecutar desde la clase como\ntal y no ncesitamos tener una instancia. Esto se lo conoce como\nmetodos estaticos "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"class Plane {\n  constructor(numEngines) {\n    this.numEngines = numEngines;\n    this.enginesActive = false;\n  }\n\n  static badWeather(planes) {\n    for (plane of planes) {\n      plane.enginesActive = false;\n    }\n  }\n\n  startEngines() {\n    console.log('starting engines\u2026');\n    this.enginesActive = true;\n  }\n}\n")),(0,l.kt)("p",null,"Para poder usarlo hacemos lo siguiente "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"Plane.badWeather([plane1, plane2, plane3]);\n")),(0,l.kt)("h4",{id:"beneficios-de-las-clases"},"Beneficios de las clases"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Menos setup "),(0,l.kt)("li",{parentName:"ul"},"Tenemos un constructor "),(0,l.kt)("li",{parentName:"ul"},"Todo esta centralizado")),(0,l.kt)("h4",{id:"cosas-a-tener-en-cuenta-con-las-clases"},"Cosas a tener en cuenta con las clases"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Solo son funciones con prototypal inheritance "),(0,l.kt)("li",{parentName:"ul"},"Debemos usar ",(0,l.kt)("inlineCode",{parentName:"li"},"new")," cada que creemos una nueva instancia "),(0,l.kt)("li",{parentName:"ul"},"las clases en js no son magicas")),(0,l.kt)("h3",{id:"symbols"},"Symbols"),(0,l.kt)("p",null,"es un tipo de dato ",(0,l.kt)("strong",{parentName:"p"},"primitivo")," que es unico e inmutable, normalmente\nlo usamos para definir propiedades de objetos"),(0,l.kt)("p",null,"asi creamos un symbol"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const sym1 = Symbol('apple');\nconsole.log(sym1);\n")),(0,l.kt)("p",null,"Si tenemos el siguiente objeto "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const bowl = {\n  'apple': { color: 'red', weight: 136.078 },\n  'banana': { color: 'yellow', weight: 183.15 },\n  'orange': { color: 'orange', weight: 170.097 }\n};\n")),(0,l.kt)("p",null,"y hacemos lo siguiente "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const bowl = {\n  'apple': { color: 'red', weight: 136.078 },\n  'banana': { color: 'yellow', weight: 183.151 },\n  'orange': { color: 'orange', weight: 170.097 },\n  'banana': { color: 'yellow', weight: 176.845 }\n};\n")),(0,l.kt)("p",null,"esto nos dara un problema porque se esta sobrescribiendo\nla propiedad banana"),(0,l.kt)("p",null,"la forma de arreglarlo es con ",(0,l.kt)("inlineCode",{parentName:"p"},"symbols")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const bowl = {\n  [Symbol('apple')]: { color: 'red', weight: 136.078 },\n  [Symbol('banana')]: { color: 'yellow', weight: 183.15 },\n  [Symbol('orange')]: { color: 'orange', weight: 170.097 },\n  [Symbol('banana')]: { color: 'yellow', weight: 176.845 }\n};\n")),(0,l.kt)("p",null,"de la siguiente forma no tendriamos problema de sobreescritura"),(0,l.kt)("h3",{id:"iterable-and-iteration"},"Iterable and Iteration"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Iterable Protocol")),(0,l.kt)("p",null,"Es el protocolo que nos permite especificar\nuna forma de iterar a travez de los valores del objeto. Pa"),(0,l.kt)("p",null,"Ademas para que un objeto sea considerado iterable debe\nimplementar la interfaz iterator. Esto quiere decir que el\nobjeto debe contener un metodo iterador predeterminado, el cual\ndefinira como se debe iterar dicho objeto"),(0,l.kt)("p",null,"Iterator Protocol"),(0,l.kt)("p",null,"define una forma en la que el objeto produce la secuencia de\nvalores. Esto lo hacemos implementando el metodo .next()"),(0,l.kt)("p",null,"El metodo .next() tiene dos propiedades:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"value"),": el valor del siguiente elemento"),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"done"),": si es true representa que llegamos al final de la\nsecuencia si es false todavia no.")),(0,l.kt)("h3",{id:"sets"},"Sets"),(0,l.kt)("p",null,"basicamente es un tipo de array que solo tiene elementos unicos\nno puede tener elementos repetidos, no tienen index y no puedo\nacceder a los elementos de forma individual"),(0,l.kt)("p",null,"Podemos crear sets de la siguiente manera "),(0,l.kt)("p",null,"Set vacio "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const games = new Set();\nconsole.log(games);\n")),(0,l.kt)("p",null,"Set creado a partir de un array "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const games = new Set(['Super Mario Bros.', 'Banjo-Kazooie', 'Mario Kart', 'Super Mario Bros.']);\nconsole.log(games);\n")),(0,l.kt)("p",null,"Para modificarlos podemos usar el metodo ",(0,l.kt)("inlineCode",{parentName:"p"},".add()")," o el metodo\n",(0,l.kt)("inlineCode",{parentName:"p"},".delete()")),(0,l.kt)("p",null,"Para borrar todos los elementos de un set podemos usar el metodo\n",(0,l.kt)("inlineCode",{parentName:"p"},".clear()")),(0,l.kt)("p",null,"Si tratas de agregar un elemento duplicado en el set te dara un\nerror y no pasara nada, ahora si tratas de borrar un elemento\nque no existe te dara un error y no pasa nada "),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},".add()")," retorna set si se agrego correctamente el elemento"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},".delete()")," retorna un bool"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},".size")," retorna el numero de elemento en el set "),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},".has()")," retorna true si el elemento existe en el set "),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},".values()")," retorna los elementos del set como un ",(0,l.kt)("inlineCode",{parentName:"p"},"SetIterator"),"\ncon el que podemos usar el metodo ",(0,l.kt)("inlineCode",{parentName:"p"},".next()")," para ir consiguiendo\ncada uno de los elementos del set"),(0,l.kt)("p",null,"Tambien podemos usar el ",(0,l.kt)("inlineCode",{parentName:"p"},"for....of")," para recorrerlo."),(0,l.kt)("h3",{id:"weak-set"},"Weak set"),(0,l.kt)("p",null,"es un set normal pero con algunas diferencias:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"solo tiene objetos "),(0,l.kt)("li",{parentName:"ol"},"no es iterable "),(0,l.kt)("li",{parentName:"ol"},"no tiene el metodo ",(0,l.kt)("inlineCode",{parentName:"li"},".clear()"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"\nlet student1 = { name: 'James', age: 26, gender: 'male' };\nlet student2 = { name: 'Julia', age: 27, gender: 'female' };\nlet student3 = { name: 'Richard', age: 31, gender: 'male' };\n\nconst roster = new WeakSet([student1, student2, student3]);\nconsole.log(roster);\n")),(0,l.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Tendremos un error si tratamos de agregar cualquier cosa al\nweakset que no sea un objeto"))),(0,l.kt)("h4",{id:"garbage-collector"},"Garbage collector"),(0,l.kt)("p",null,"Cuando una variable es declarada se ocupa un espacio en memoria\nreservado para dicha variable y este se elimina cuando la variable\nse deja de usar. El proceso de buscar dichas variables para\nliberar memoria se lo conoce como el garbage collector "),(0,l.kt)("p",null,"Los weakset hacen un buen uso de esto porque si uno de los objetos\nque agregamos al weakset lo hacemos null es decir lo eliminamos\nautomaticamente el weakset libera la memoria de dicho elemento."),(0,l.kt)("h3",{id:"maps"},"Maps"),(0,l.kt)("p",null,"son parecidos a los set pero con los objetos. "),(0,l.kt)("p",null,"tenemos el metodo ",(0,l.kt)("inlineCode",{parentName:"p"},".set()")," y el metodo ",(0,l.kt)("inlineCode",{parentName:"p"},".delete()")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const employees = new Map();\n\nemployees.set('james.parkes@udacity.com', { \n    firstName: 'James',\n    lastName: 'Parkes',\n    role: 'Content Developer' \n});\nemployees.set('julia@udacity.com', {\n    firstName: 'Julia',\n    lastName: 'Van Cleve',\n    role: 'Content Developer'\n});\nemployees.set('richard@udacity.com', {\n    firstName: 'Richard',\n    lastName: 'Kalehoff',\n    role: 'Content Developer'\n});\n\nconsole.log(employees);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"employees.delete('julia@udacity.com');\nemployees.delete('richard@udacity.com');\nconsole.log(employees);\n")),(0,l.kt)("p",null,"Tambien podemos usar ",(0,l.kt)("inlineCode",{parentName:"p"},".has()")," para ver si un elemento existe "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const members = new Map();\n\nmembers.set('Evelyn', 75.68);\nmembers.set('Liam', 20.16);\nmembers.set('Sophia', 0);\nmembers.set('Marcus', 10.25);\n\nconsole.log(members.has('Xavier')); // false\nconsole.log(members.has('Marcus')); // true\n")),(0,l.kt)("p",null,"Podemos obtener los elementos de un map con el metodo ",(0,l.kt)("inlineCode",{parentName:"p"},".get()")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"console.log(members.get('Evelyn'));\n")),(0,l.kt)("p",null,"Para poder iterar un map tenemos las siguientes formas:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"usando el iterador por default "),(0,l.kt)("li",{parentName:"ol"},"usando ",(0,l.kt)("inlineCode",{parentName:"li"},"for...of")," "),(0,l.kt)("li",{parentName:"ol"},"usando el metodo ",(0,l.kt)("inlineCode",{parentName:"li"},".forEach()"))),(0,l.kt)("h3",{id:"weak-maps"},"Weak Maps"),(0,l.kt)("p",null,"Los weak maps son como los maps con 3 diferencias:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"solo puede tener objetos como claves"),(0,l.kt)("li",{parentName:"ol"},"no es iterable por ende no podemos crear bucles"),(0,l.kt)("li",{parentName:"ol"},"no tenemos el metodo ",(0,l.kt)("inlineCode",{parentName:"li"},".clear()"))),(0,l.kt)("p",null,"Para crear un weak map hacemos lo siguiente "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const book1 = { title: 'Pride and Prejudice', author: 'Jane Austen' };\nconst book2 = { title: 'The Catcher in the Rye', author: 'J.D. Salinger' };\nconst book3 = { title: 'Gulliver\u2019s Travels', author: 'Jonathan Swift' };\n\nconst library = new WeakMap();\nlibrary.set(book1, true);\nlibrary.set(book2, false);\nlibrary.set(book3, true);\n\nconsole.log(library);\n")),(0,l.kt)("p",null,"Ahora si tratamos de agregar cualquier cosa que no sea un objeto\ncomo clave nos da el siguiente error "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"library.set('The Grapes of Wrath', false);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Uncaught TypeError: Invalid value used as weak map key(\u2026)\n")),(0,l.kt)("h3",{id:"promesas"},"Promesas"),(0,l.kt)("p",null,"Una promesa es una forma de manejar las peticiones asincronas\nen js. De modo que mientras pedimos algo o hacemos alguna\nsolicitud que demanda tiempo mientras esperamos podemos estar\nhaciendo otras actividades."),(0,l.kt)("p",null,"para poder crear un promesa hacemos lo siguiente "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"\nnew Promise(function (resolve, reject) {\n    window.setTimeout(function createSundae(flavor = 'chocolate') {\n        const sundae = {};\n        // request ice cream\n        // get cone\n        // warm up ice cream scoop\n        // scoop generous portion into cone!\n        resolve(sundae);\n    }, Math.random() * 2000);\n});\n\n")),(0,l.kt)("p",null,"las promesas tienen dos argumentos ",(0,l.kt)("inlineCode",{parentName:"p"},"resolve")," y ",(0,l.kt)("inlineCode",{parentName:"p"},"reject"),"\nestos los usamos para definir el comportamiento cuando algo\nfunciona correctamente o fracasa"),(0,l.kt)("h3",{id:"proxies"},"Proxies"),(0,l.kt)("p",null,"Es como la secretaria de los objetos, es decir, que es la primera\nentidad que interactua con otras entidades."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"var richard = {status: 'looking for work'};\nvar agent = new Proxy(richard, {});\n\nagent.status; // returns 'looking for work'\n")),(0,l.kt)("p",null,"de esta manera podemos crear un secretaria de objetos "),(0,l.kt)("p",null,"Podemos manejar interceptores de funciones para realizar acciones\npor ejemplo al tratar de obtener una propiedad ademas podemos\nhacer un console.log o realizar algun cambio. Otra cosa que\npodemos hacer es que al momento de cambiar un valor se actualice\nde una cierta forma, etc. "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const richard = {status: 'looking for work'};\nconst handler = {\n    get(target, propName) {\n        console.log(target); // the `richard` object, not `handler` and not `agent`\n        console.log(propName); // the name of the property the proxy (`agent` in this case) is checking\n    }\n};\nconst agent = new Proxy(richard, handler);\nagent.status;\n")),(0,l.kt)("p",null,"con ese codigo cada que queremos el valor de una variable se\nimprime todo el objeto y la propiedad que buscamos "),(0,l.kt)("p",null,"Ahora si queremos manejar eventos cuando actualizamos valores\nusamos el ",(0,l.kt)("inlineCode",{parentName:"p"},"set trap")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const richard = {status: 'looking for work'};\nconst handler = {\n    set(target, propName, value) {\n        if (propName === 'payRate') { // if the pay is being set, take 15% as commission\n            value = value * 0.85;\n        }\n        target[propName] = value;\n    }\n};\nconst agent = new Proxy(richard, handler);\nagent.payRate = 1000; // set the actor's pay to $1,000\nagent.payRate;\n")),(0,l.kt)("p",null,"Con los proxies tenemos 13 diferentes traps que podemos usar\npara cambiar el comportamiento de nuestros objetos o agregarle\nfuncionalidades."),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"the get trap - lets the proxy handle calls to property access"),(0,l.kt)("li",{parentName:"ol"},"the set trap - lets the proxy handle setting the property to a new value"),(0,l.kt)("li",{parentName:"ol"},"the apply trap - lets the proxy handle being invoked (the object being proxied is a function)"),(0,l.kt)("li",{parentName:"ol"},"the has trap - lets the proxy handle the using in operator"),(0,l.kt)("li",{parentName:"ol"},"the deleteProperty trap - lets the proxy handle if a property is deleted"),(0,l.kt)("li",{parentName:"ol"},"the ownKeys trap - lets the proxy handle when all keys are requested"),(0,l.kt)("li",{parentName:"ol"},"the construct trap - lets the proxy handle when the proxy is used with the new keyword as a constructor"),(0,l.kt)("li",{parentName:"ol"},"the defineProperty trap - lets the proxy handle when defineProperty is used to create a new property on the object"),(0,l.kt)("li",{parentName:"ol"},"the getOwnPropertyDescriptor trap - lets the proxy handle getting the property's descriptors"),(0,l.kt)("li",{parentName:"ol"},"the preventExtenions trap - lets the proxy handle calls to Object.preventExtensions() on the proxy object"),(0,l.kt)("li",{parentName:"ol"},"the isExtensible trap - lets the proxy handle calls to Object.isExtensible on the proxy object"),(0,l.kt)("li",{parentName:"ol"},"the getPrototypeOf trap - lets the proxy handle calls to Object.getPrototypeOf on the proxy object"),(0,l.kt)("li",{parentName:"ol"},"the setPrototypeOf trap - lets the proxy handle calls to Object.setPrototypeOf on the proxy object")),(0,l.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Con los getters y setter tambien podemos hacer lo mismo que con\nel trap de get y el trap de set. La diferencia principal esta\nen conocer las propiedades. Con los proxies no es necesario que conozcamos las propiedades primero para declarar dichos getters\ny setters"))),(0,l.kt)("h3",{id:"generators"},"Generators"),(0,l.kt)("p",null,"son basicamente funciones que podemos pausar. Esto en algunos\ncasos es util porque normalmente js funciona con la forma\n",(0,l.kt)("inlineCode",{parentName:"p"},"run-to-completion")," esto quiere decir que empieza ejecutando\nla primera linea de codigo y sigue asi hasta llegar al final\nsin poder pausar en el medio o en cualqueir parte del codigo."),(0,l.kt)("p",null,"Para declarar un generator basta con agregar un asterisco\nentre la palabra reservada ",(0,l.kt)("inlineCode",{parentName:"p"},"functions")," y el nombre de la funcion."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"function* getEmployee() {\n    console.log('the function has started');\n\n    const names = ['Amanda', 'Diego', 'Farrin', 'James', 'Kagure', 'Kavita', 'Orit', 'Richard'];\n\n    for (const name of names) {\n        console.log( name );\n    }\n\n    console.log('the function has ended');\n}\n")),(0,l.kt)("p",null,"esto nos devuelve un iterador y con el metodo ",(0,l.kt)("inlineCode",{parentName:"p"},".next()")," podemos\navanzar entre los diferentes ",(0,l.kt)("inlineCode",{parentName:"p"},"yields")," del generador."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"function* getEmployee() {\n    console.log('the function has started');\n\n    const names = ['Amanda', 'Diego', 'Farrin', 'James', 'Kagure', 'Kavita', 'Orit', 'Richard'];\n\n    for (const name of names) {\n        yield name;\n    }\n\n    console.log('the function has ended');\n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'const generatorIterator = getEmployee();\nlet result = generatorIterator.next();\nresult.value // is "Amanda"\n\ngeneratorIterator.next().value // is "Diego"\ngeneratorIterator.next().value // is "Farrin"\n')),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Siempre vas a necesitaras ejecturar la function ",(0,l.kt)("inlineCode",{parentName:"p"},".next"),"\nn + 1 veces el yield este en la funcion. "))),(0,l.kt)("h3",{id:"pollyfills"},"Pollyfills"),(0,l.kt)("p",null,"Es una forma de implementar funcionalidades con codigo nativo\nde js en navegadores que aun no tienen las versiones actualizada\nde dichas funcionalidades nuevas."),(0,l.kt)("h4",{id:"compilers"},"Compilers"),(0,l.kt)("p",null,"UN compilador cambia el nivel del abstraccion del lenguaje es\ndecir que si tenemos codigo escrito que entendemos los humanos\ndicho coddigo es transformado a lenguaje de maquina "),(0,l.kt)("h4",{id:"transpilers"},"Transpilers"),(0,l.kt)("p",null,"Por otro lado los transpiladores solo cambian el lenguaje humano\npor otro lenguaje que entendiendan los humanos, es decir, si\nqueremos cambiar de java a python necesitamos un transpilador\nque haga ese trabajo por nosotros y esto es util porque si usamos\nES6 podemos usar un transpilador que cambie el lenguaje a ES5 que\nes el lenguaje que todos los navegadores entienden."),(0,l.kt)("p",null,"Uno de los transpiladores mas usados en js es babel, con el no\nsolo podemos transpilar codigo de ES6 a ES5 sino tambien JSX a JS\netc."))}m.isMDXComponent=!0},3781:function(e,a,n){a.Z=n.p+"assets/images/indexing-66cc33e2607b91475f4ff0fe44b5b004.png"}}]);