"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[815],{3905:function(e,n,a){a.d(n,{Zo:function(){return c},kt:function(){return m}});var t=a(7294);function o(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function s(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){o(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=t.createContext({}),d=function(e){var n=t.useContext(l),a=n;return e&&(a="function"==typeof e?e(n):s(s({},n),e)),a},c=function(e){var n=d(e.components);return t.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var a=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=d(a),m=o,g=p["".concat(l,".").concat(m)]||p[m]||u[m]||r;return a?t.createElement(g,s(s({ref:n},c),{},{components:a})):t.createElement(g,s({ref:n},c))}));function m(e,n){var a=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=a.length,s=new Array(r);s[0]=p;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var d=2;d<r;d++)s[d]=a[d];return t.createElement.apply(null,s)}return t.createElement.apply(null,a)}p.displayName="MDXCreateElement"},3682:function(e,n,a){a.r(n),a.d(n,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return c},default:function(){return p}});var t=a(7462),o=a(3366),r=(a(7294),a(3905)),s=["components"],i={sidebar_position:7},l="Domain Driven Design",d={unversionedId:"herramientas/DDD",id:"herramientas/DDD",title:"Domain Driven Design",description:"Esta metodologia se crea a partir de muchas iteraciones donde la entropia del codigo",source:"@site/docs/herramientas/DDD.md",sourceDirName:"herramientas",slug:"/herramientas/DDD",permalink:"/docs/herramientas/DDD",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/herramientas/DDD.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Jira",permalink:"/docs/herramientas/jira"},next:{title:"Cloud Computing",permalink:"/docs/herramientas/cloud"}},c=[{value:"Bounded Context",id:"bounded-context",children:[],level:2},{value:"Context Mapping",id:"context-mapping",children:[{value:"Tipos de relaciones",id:"tipos-de-relaciones",children:[{value:"Anti-corruption Layer",id:"anti-corruption-layer",children:[],level:4},{value:"Conformist",id:"conformist",children:[],level:4},{value:"Customer/Supplier",id:"customersupplier",children:[],level:4},{value:"Shared Kernel",id:"shared-kernel",children:[],level:4}],level:3}],level:2},{value:"Patterns",id:"patterns",children:[{value:"Entities",id:"entities",children:[],level:3},{value:"Value Objects",id:"value-objects",children:[],level:3},{value:"Services",id:"services",children:[],level:3},{value:"Aggregates",id:"aggregates",children:[],level:3},{value:"Business invariants",id:"business-invariants",children:[],level:3},{value:"Factories (Setters)",id:"factories-setters",children:[],level:3},{value:"Repositories (getters)",id:"repositories-getters",children:[],level:3}],level:2}],u={toc:c};function p(e){var n=e.components,a=(0,o.Z)(e,s);return(0,r.kt)("wrapper",(0,t.Z)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"domain-driven-design"},"Domain Driven Design"),(0,r.kt)("p",null,"Esta metodologia se crea a partir de muchas iteraciones donde la entropia del codigo\naumenta conforme el proyecto crece."),(0,r.kt)("p",null,"Es una sistema que nos ayuda a unir todas las implementaciones que estan cambiando\ncostantemente los modelos. Dejando de lado cosas como los lenguajes de programacion,\ninfraestructura, etc."),(0,r.kt)("p",null,"Se enfoca en los problemas de negocios y como organizamos la logica de programacion\nque va a resolver dicho problema."),(0,r.kt)("p",null,"Una de las practicas que busca DDD es que los desarrolladores trabajen a la par con expertos\ndel area con el fin de estar cambiando los modelos. Forzando a los desarrolladores a conocer\nmas acerca del negocio y que no hagan solo codigo de forma mecanica."),(0,r.kt)("p",null,"Para esto se debe manejar un lenguaje en el que equipos tecnicos con administrativos puedan\ncomunicarse y entenderse, a este nuevo lenguaje le llamamos ",(0,r.kt)("inlineCode",{parentName:"p"},"ubiquitous Language"),", con este lenguaje\npodremos ser menos ambiguos y mas efectivos entre tech team y business teams."),(0,r.kt)("p",null,"DDD busca dividir el codigo en 4 capas:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"User Interface: Es el responsable de mostrar o capturar la informacion del usuario"),(0,r.kt)("li",{parentName:"ul"},"Application: Es el orquestador el cual dirige como a los domain objects, esta puede acceder\na otros ",(0,r.kt)("inlineCode",{parentName:"li"},"bounded context")),(0,r.kt)("li",{parentName:"ul"},"Domain: Tiene toda la logica de negocio y reglas, ademas del estado del negocio."),(0,r.kt)("li",{parentName:"ul"},"Infrastructure: Implementa toda las funcionalidades tecnicas, comunicaciones, etc.")),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"No todas las capas son necesarias para todos los proyectos pero si la Domain layer es necesaria\npara ser DDD"))),(0,r.kt)("p",null,"La regla principal es que cada capa solo puede comunicarse con ella mismo o con las de abajo.\nLas capas de arriba pueden usar componentes de las capas de abajo usando sus interfaces pero\nlas capas de abajo solo pueden comunicarse con las capas de arriba usando\nIoC (Inversion of control)."),(0,r.kt)("h2",{id:"bounded-context"},"Bounded Context"),(0,r.kt)("p",null,"Tambien puede ser considerado como el solution space\nEs un concepto que busca contextualizar las entidades que tenemos con el fin\nde evitar ambiguedades."),(0,r.kt)("p",null,"Por ejemplo si tenemos una letra sin contexto puede significar dos cosas. "),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Una letra sin mas "),(0,r.kt)("li",{parentName:"ol"},"Un mensaje para una persona ")),(0,r.kt)("p",null,"En muchos proyectos los equipos son distribuidos en ",(0,r.kt)("inlineCode",{parentName:"p"},"bounded context")," que son las\nareas de especializacion. Por ejemplo finanzas, marketing, it, etc."),(0,r.kt)("h2",{id:"context-mapping"},"Context Mapping"),(0,r.kt)("p",null,"Es una forma grafica para documentar como cada ",(0,r.kt)("inlineCode",{parentName:"p"},"bounded context")," se relaciona y comunican\nentre ellos dentro de un proyecto."),(0,r.kt)("h3",{id:"tipos-de-relaciones"},"Tipos de relaciones"),(0,r.kt)("p",null,"Las relaciones entre los ",(0,r.kt)("inlineCode",{parentName:"p"},"bounded context")," pueden ser variadas depende del dise\xf1os que\nqueremos ejecutar, tenemos 4 principales."),(0,r.kt)("h4",{id:"anti-corruption-layer"},"Anti-corruption Layer"),(0,r.kt)("p",null,"El ",(0,r.kt)("inlineCode",{parentName:"p"},"bounded context")," hijo traduce los datos/modelos del padre con el fin de usarlos\ninternamente."),(0,r.kt)("h4",{id:"conformist"},"Conformist"),(0,r.kt)("p",null,"el ",(0,r.kt)("inlineCode",{parentName:"p"},"bounded context")," hijo se conforma y adapta al padre (si debe cambiar en el proceso lo hace).\nAl padre no le interesa la informacion del hijo."),(0,r.kt)("h4",{id:"customersupplier"},"Customer/Supplier"),(0,r.kt)("p",null,"El hijo actua como un cliente solicitando cambios que el padre como proveedor debe darselos.\nCambiar de ser necesario para cumplir con las expectativas"),(0,r.kt)("h4",{id:"shared-kernel"},"Shared Kernel"),(0,r.kt)("p",null,"Muchas veces es inevitable que dos o mas ",(0,r.kt)("inlineCode",{parentName:"p"},"bounded context")," se sobrepongan, para esto hacemos que\ncompartan los recursos y si un cambio se produce ambos deben cambiar para cumplir con dicho recurso.\nDeben estar sincronizados y en lo posible tratar de evitar su uso."),(0,r.kt)("h2",{id:"patterns"},"Patterns"),(0,r.kt)("h3",{id:"entities"},"Entities"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Son objetos que contienen un id unico y un hilo de ejecucion continua."),(0,r.kt)("li",{parentName:"ul"},"No esta definidas por sus atributos sino mas bien por ",(0,r.kt)("strong",{parentName:"li"},"quienes son"),"."),(0,r.kt)("li",{parentName:"ul"},"Sus atributos pueden cambiar drasticamente a lo largo de su ciclo de vida pero\nsu identidad persiste.")),(0,r.kt)("p",null,"No es considerado una entidad del dominio una orden en el mundo de e-commerce debido\na que tiene bastantes estados donde la orden muta quien es."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"export class Customer {\n\n    private id: number;\n    private name: string;\n\n    protected constructor(name: string) {\n        // A uuid guarantees a unique identity for the Customer Entity\n        this.id = uuidv4();\n        this.name = this.setName(name);\n    }\n\n    private setName(name: string): string {\n        // Business invariant: Customer name should not be empty\n        if (name === undefined || name === '') {\n            throw new Error('Name cannot be empty');\n        }\n        return name;\n    }\n\n    public static create(name: string): Customer {\n        return new Customer(name);\n    }\n}\n")),(0,r.kt)("h3",{id:"value-objects"},"Value Objects"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Objetos que se describen por medio de sus caracteristicas no por el identificador unico"),(0,r.kt)("li",{parentName:"ul"},"No se preocupan por quienes son sino por ",(0,r.kt)("strong",{parentName:"li"},"que son"),"."),(0,r.kt)("li",{parentName:"ul"},"Son inmutables con la finalidad de obligar al sistema a reemplazarlas por nuevas instancias "),(0,r.kt)("li",{parentName:"ul"},"Pueden ser usadas por varias entidades."),(0,r.kt)("li",{parentName:"ul"},"Si la informacion provisionada dentro del value object es invalidad el mismo no se crea.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"export class Address {\n\n    private readonly streetAddress: string;\n    private readonly postalCode: string\n\n    protected constructor(streetAddress: string, postalCode: string) {\n        this.streetAddress = this.getValidStreetAddress(streetAddress);\n        this.postalCode = this.getValidPostalCode(postalCode);\n    }\n\n    private getValidStreetAddress(streetAddress: string): string {\n        // Business invariant: street address should not be longer than 128 characters\n        if (streetAddress.length > 128) {\n            throw new Error('Address should not be longer than 128 characters');\n        }\n        return streetAddress;\n    }\n\n    private getValidPostalCode(postalCode: string): string {\n        // Business invariant: Should be a valid canadian postal code\n        const pattern = /[a-z]\\d[a-z][ \\-]?\\d[a-z]\\d/g;\n        if (!postalCode.match(pattern)) {\n            throw new Error('Postal code should only contain alphanumeric caracters and spaces');\n        }\n        return postalCode;\n    }\n\n    public getStreetAddress(): string {\n        return this.streetAddress;\n    }\n\n    public getPostalCode(): string {\n        return this.postalCode;\n    }\n\n    public static create(streetAddress: string, postalCode: string): Address {\n        return new Address(streetAddress, postalCode);\n    }\n\n    public equals(otherAddress: Address): boolean {\n        // Value Objects equality is based on their propertie's values\n        return objectHelper.isEqual(this, otherAddress);\n    }\n}\n")),(0,r.kt)("h3",{id:"services"},"Services"),(0,r.kt)("p",null,"En algunas ocasiones el modelo de dominio necesitara hacer acciones que no tienen que ver con\nlas entidades o los value objetcs. Para estos escenarios usaremos ",(0,r.kt)("inlineCode",{parentName:"p"},"services")," los cuales son\nstateless. Debemos tener cuidado al crear ",(0,r.kt)("inlineCode",{parentName:"p"},"services")," debido a que no podemos implementar\nacciones correspondientes a las entidades u object values en los servicios."),(0,r.kt)("h3",{id:"aggregates"},"Aggregates"),(0,r.kt)("p",null,"Son colecciones relacionadas entre entidades y value objects las cuales representaran\n",(0,r.kt)("inlineCode",{parentName:"p"},"transactional boundary"),". Cada agregacion tiene una entidad que controla todo el trafico con\nel mundo exterior."),(0,r.kt)("h3",{id:"business-invariants"},"Business invariants"),(0,r.kt)("p",null,"Son reglas de negocio que mantienen la integridad de las agregaciones y su contenido. Por ejemplo\nUna orden nunca se puede crear si la cantidad de dicho producto es 0."),(0,r.kt)("h3",{id:"factories-setters"},"Factories (Setters)"),(0,r.kt)("p",null,"Son capaces de construir entidades y agreaciones en un solo paso, para esto requiere que le pasemos\ntoda la informacion que necesita para ser creada, con esto forzamos que toda la informacion creada\nsea correcta esto no es responsabilidad del Domain model sino que pertenece dentro de la capa de dominio\npor medio de las reglas de negocio."),(0,r.kt)("h3",{id:"repositories-getters"},"Repositories (getters)"),(0,r.kt)("p",null,"Provee de una interface que esta oculta al usuario, la cual podemos usar para recibir la informacion\nalmacenada en los objetos. Todas las definiciones de los repositorios debe ser creada en la domain layer\npero implementada en la infraestructure layer."))}p.isMDXComponent=!0}}]);